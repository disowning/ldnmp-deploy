#!/bin/bash

# deploy.sh - 自动化部署脚本

# 设置颜色输出
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}开始部署 LDNMP 环境...${NC}"

# 创建必要的目录结构
echo -e "${YELLOW}创建目录结构...${NC}"
mkdir -p /www/wwwroot
cd /www/wwwroot

# 克隆配置文件
echo -e "${YELLOW}克隆配置文件...${NC}"
git clone https://github.com/你的用户名/ldnmp-config.git .

# 创建目录
mkdir -p nginx/conf.d nginx/ssl mysql/data mysql/conf.d sites/jx099

# 设置环境变量
echo -e "${YELLOW}配置环境变量...${NC}"
cat > .env << EOL
MYSQL_ROOT_PASSWORD=$(openssl rand -base64 32)
MYSQL_DATABASE=jx099
NEXTAUTH_SECRET=$(openssl rand -base64 32)
NEXTAUTH_URL=https://jx099.com
EOL

# 安装 Docker 和 Docker Compose
echo -e "${YELLOW}安装 Docker...${NC}"
curl -fsSL https://get.docker.com | sh
apt install -y docker-compose

# 配置 SSL 证书
echo -e "${YELLOW}配置 SSL 证书...${NC}"
apt install -y certbot
certbot certonly --standalone -d jx099.com

# 复制证书
cp /etc/letsencrypt/live/jx099.com/fullchain.pem nginx/ssl/jx099.com.pem
cp /etc/letsencrypt/live/jx099.com/privkey.pem nginx/ssl/jx099.com.key

# 克隆项目代码
echo -e "${YELLOW}克隆项目代码...${NC}"
git clone https://github.com/你的用户名/你的项目.git sites/jx099

# 启动服务
echo -e "${YELLOW}启动 Docker 服务...${NC}"
docker-compose up -d

# 执行数据库迁移
echo -e "${YELLOW}执行数据库迁移...${NC}"
docker-compose exec nextjs npx prisma db push

# 设置自动更新证书
echo -e "${YELLOW}配置证书自动更新...${NC}"
echo "0 0 1 * * certbot renew --quiet" | crontab -

# 配置备份
echo -e "${YELLOW}配置自动备份...${NC}"
cat > /root/backup.sh << 'EOL'
#!/bin/bash
backup_dir="/backup/$(date +%Y%m%d)"
mkdir -p $backup_dir

# 备份数据库
docker-compose exec -T mysql mysqldump -u root -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE > $backup_dir/database.sql

# 备份配置文件
tar -czf $backup_dir/config.tar.gz /www/wwwroot/nginx /www/wwwroot/.env

# 删除旧备份
find /backup -type d -mtime +7 -exec rm -rf {} \;
EOL

chmod +x /root/backup.sh
echo "0 3 * * * /root/backup.sh" | crontab -

# 添加监控脚本
echo -e "${YELLOW}配置监控脚本...${NC}"
cat > /root/monitor.sh << 'EOL'
#!/bin/bash
# 检查服务状态
docker-compose ps | mail -s "服务器状态报告" your@email.com
EOL

chmod +x /root/monitor.sh
echo "0 * * * * /root/monitor.sh" | crontab -

echo -e "${GREEN}部署完成！${NC}"
echo -e "${GREEN}请检查以下内容：${NC}"
echo "1. 访问 https://jx099.com 确认网站是否正常运行"
echo "2. 检查 docker-compose ps 确认所有服务是否正常"
echo "3. 检查 /root/backup.sh 确认备份是否正常"
echo "4. 查看 docker-compose logs 检查是否有错误"

# 保存重要信息
echo -e "${YELLOW}保存重要信息...${NC}"
echo "MySQL Root 密码: $(grep MYSQL_ROOT_PASSWORD .env | cut -d= -f2)" > /root/credentials.txt
echo "NextAuth Secret: $(grep NEXTAUTH_SECRET .env | cut -d= -f2)" >> /root/credentials.txt
chmod 600 /root/credentials.txt

version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - nextjs
    restart: always
    networks:
      - app_network

  mysql:
    image: mysql:8.0
    environment:
      # MySQL root 用户密码，建议使用强密码
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # 默认创建的数据库名称
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      # 数据库字符集，推荐使用 utf8mb4
      MYSQL_CHARACTER_SET_SERVER: ${MYSQL_CHARACTER_SET_SERVER}
      # 数据库排序规则，推荐使用 utf8mb4_unicode_ci
      MYSQL_COLLATION_SERVER: ${MYSQL_COLLATION_SERVER}
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
    restart: always
    networks:
      - app_network
    command: --default-authentication-plugin=mysql_native_password
    cap_add:
      - SYS_NICE

  nextjs:
    image: node:18
    working_dir: /app
    volumes:
      - ./sites/jx099:/app
    command: >
      bash -c "npm install
      && npm run build
      && npm run start"
    environment:
      # NextAuth.js 加密密钥，用于加密会话和令牌
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # NextAuth.js 回调 URL，用于认证流程
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      # Prisma 数据库连接 URL
      - DATABASE_URL=${DATABASE_URL}
      # Node.js 运行环境，可选值：development, production
      - NODE_ENV=${NODE_ENV}
      # Next.js 应用监听端口
      - PORT=${PORT}
    depends_on:
      - mysql
    restart: always
    networks:
      - app_network

networks:
  app_network:
    driver: bridge